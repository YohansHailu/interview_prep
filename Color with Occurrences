from collections import defaultdict, deque, Counter
from functools import lru_cache, reduce 
from heapq import heappush, heappop, heapify
from bisect import bisect_right, bisect_left
from random import randint
from fractions import Fraction as frac
import math
import operator
 
hpop = heappop 
hpush = heappush
MOD = 10**9 + 7
 
def solution():
    line = input()
    n = int(input())
    arr = []
    for i in range(n):
        arr.append((input(),i + 1))
    arr.sort(key=lambda x:len(x[0]), reverse=True)
    
    end_arr = [(0,-1)]*len(line)
    for i in range(len(line)):
        for word, sub_index in arr:
            end = i+len(word)
            if word == line[i:end]:
                end_arr[i] = (end, sub_index)
                break
 
    max_end_index = list(range(len(end_arr))) 
    for i in range(1, len(max_end_index)):
        pre_max = max_end_index[i-1]
        if end_arr[i][0] < end_arr[pre_max][0]:
            max_end_index[i] = pre_max
    
    res = []
    current = 0
    count = 0
    while current < len(end_arr):
        max_index = max_end_index[current]
        jump, sub_index = end_arr[max_index]
        res.append((max_index + 1, sub_index))
        if jump == current:
            return print(-1)
        current = jump
        count += 1
 
    print(count)    
    for start, sub in res:
        print(sub, start)
    
    # register  who is who
 
    # where did I start and which one I used is important
 
    # for each inedex
    
    # if no jump thats it
    # max_end
    # jump_array --> end_array
    # iterate for each index
 
    
 
def main():
    #test()
    t = 1
    t = int(input())
    for _ in range(t):
        solution() 
 
#import sys
#import threading
#sys.setrecursionlimit(10**6)
#threading.stack_size(1 << 27)
#thread = threading.Thread(target=main)
#thread.start(); thread.join()
main()
 
 
 
# best africa
